// Generated by BUCKLESCRIPT VERSION 2.0.0, PLEASE EDIT WITH CARE
'use strict';

var Fs                = require("fs");
var List              = require("bs-platform/lib/js/list.js");
var $$Array           = require("bs-platform/lib/js/array.js");
var Curry             = require("bs-platform/lib/js/curry.js");
var $$String          = require("bs-platform/lib/js/string.js");
var Js_dict           = require("bs-platform/lib/js/js_dict.js");
var JsYaml            = require("js-yaml");
var Json_decode       = require("bs-json/src/Json_decode.js");
var TestSuite$Resting = require("./testSuite.js");

function dictToList(dict) {
  return $$Array.to_list(Js_dict.entries(dict));
}

function method_(json) {
  var x = $$String.uppercase(Json_decode.string(json));
  switch (x) {
    case "DELETE" : 
        return /* Delete */4;
    case "GET" : 
        return /* Get */0;
    case "HEAD" : 
        return /* Head */5;
    case "OPTIONS" : 
        return /* Options */6;
    case "PATCH" : 
        return /* Patch */2;
    case "POST" : 
        return /* Post */1;
    case "PUT" : 
        return /* Put */3;
    default:
      throw [
            TestSuite$Resting.UnknownHttpMethod,
            x
          ];
  }
}

function auth(json) {
  return /* record */[
          /* user */Json_decode.optional((function (param) {
                  return Json_decode.field("user", Json_decode.string, param);
                }), json),
          /* password */Json_decode.optional((function (param) {
                  return Json_decode.field("password", Json_decode.string, param);
                }), json)
        ];
}

function statusCode(json) {
  return TestSuite$Resting.createStatusCode(Json_decode.$$int(json));
}

function expect(json) {
  var dict = Json_decode.field("headers", (function (param) {
          return Json_decode.dict(Json_decode.string, param);
        }), json);
  return /* record */[
          /* body */Json_decode.optional((function (param) {
                  return Json_decode.field("body", (function (x) {
                                return x;
                              }), param);
                }), json),
          /* statusCode */Json_decode.optional((function (param) {
                  return Json_decode.field("statusCode", statusCode, param);
                }), json),
          /* headers */$$Array.to_list(Js_dict.entries(dict))
        ];
}

function headers(json) {
  var dict = Json_decode.dict(Json_decode.string, json);
  return $$Array.to_list(Js_dict.entries(dict));
}

function testCase(json) {
  return /* record */[
          /* description */Json_decode.field("description", Json_decode.string, json),
          /* method */Json_decode.field("method", method_, json),
          /* url */Json_decode.field("url", Json_decode.string, json),
          /* auth */Json_decode.optional((function (param) {
                  return Json_decode.field("auth", auth, param);
                }), json),
          /* headers */Json_decode.field("headers", headers, json),
          /* expect */Json_decode.optional((function (param) {
                  return Json_decode.field("expect", expect, param);
                }), json),
          /* assertions */Json_decode.optional((function (param) {
                  return Json_decode.field("assertions", (function (param) {
                                return Json_decode.list(Json_decode.string, param);
                              }), param);
                }), json),
          /* preRequest */Json_decode.optional((function (param) {
                  return Json_decode.field("pre-request", Json_decode.string, param);
                }), json),
          /* postRequest */Json_decode.optional((function (param) {
                  return Json_decode.field("post-request", Json_decode.string, param);
                }), json)
        ];
}

function environmentVariables(json) {
  var dict = Json_decode.dict(Json_decode.string, json);
  return $$Array.to_list(Js_dict.entries(dict));
}

function testCases(param) {
  return Json_decode.list(testCase, param);
}

var file = Fs.readFileSync("testfile.yaml", "utf8");

var result = testCases(Curry._2(JsYaml.safeLoad, file, /* () */0));

var match = List.hd(result)[/* expect */5];

console.log(match ? match[0][/* statusCode */1] : /* Some */[TestSuite$Resting.createStatusCode(200)]);

exports.dictToList           = dictToList;
exports.method_              = method_;
exports.auth                 = auth;
exports.statusCode           = statusCode;
exports.expect               = expect;
exports.headers              = headers;
exports.testCase             = testCase;
exports.environmentVariables = environmentVariables;
exports.testCases            = testCases;
exports.file                 = file;
exports.result               = result;
/* file Not a pure module */
