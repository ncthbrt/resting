// Generated by BUCKLESCRIPT VERSION 2.0.0, PLEASE EDIT WITH CARE
'use strict';

var Fs              = require("fs");
var List            = require("bs-platform/lib/js/list.js");
var $$Array         = require("bs-platform/lib/js/array.js");
var Curry           = require("bs-platform/lib/js/curry.js");
var $$String        = require("bs-platform/lib/js/string.js");
var Js_dict         = require("bs-platform/lib/js/js_dict.js");
var JsYaml          = require("js-yaml");
var Json_decode     = require("bs-json/src/Json_decode.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var UnknownHttpMethod = Caml_exceptions.create("Types-Testingbug.UnknownHttpMethod");

function dictToArray(dict) {
  return $$Array.to_list(Js_dict.entries(dict));
}

function method_(json) {
  var x = $$String.uppercase(Json_decode.string(json));
  switch (x) {
    case "DELETE" : 
        return /* Delete */4;
    case "GET" : 
        return /* Get */0;
    case "HEAD" : 
        return /* Head */5;
    case "OPTIONS" : 
        return /* Options */6;
    case "PATCH" : 
        return /* Patch */2;
    case "POST" : 
        return /* Post */1;
    case "PUT" : 
        return /* Put */3;
    default:
      throw [
            UnknownHttpMethod,
            x
          ];
  }
}

function header(json) {
  return List.hd($$Array.to_list(Js_dict.entries(Json_decode.dict(Json_decode.string, json))));
}

function headers(json) {
  return Json_decode.list(header, json);
}

function testCase(json) {
  return /* record */[
          /* description */Json_decode.field("description", Json_decode.string, json),
          /* method */Json_decode.field("method", method_, json),
          /* url */Json_decode.field("url", Json_decode.string, json),
          /* auth : None */0,
          /* headers */Json_decode.field("headers", headers, json),
          /* expect : None */0,
          /* assertions */Json_decode.optional((function (param) {
                  return Json_decode.field("assertions", Json_decode.string, param);
                }), json),
          /* preRequest */Json_decode.optional((function (param) {
                  return Json_decode.field("pre-request", Json_decode.string, param);
                }), json),
          /* postRequest */Json_decode.optional((function (param) {
                  return Json_decode.field("post-request", Json_decode.string, param);
                }), json)
        ];
}

function environmentVariables(json) {
  var dict = Json_decode.dict(Json_decode.string, json);
  return $$Array.to_list(Js_dict.entries(dict));
}

function testCases(json) {
  return Json_decode.list(testCase, json);
}

var Decode = /* module */[
  /* dictToArray */dictToArray,
  /* method_ */method_,
  /* header */header,
  /* headers */headers,
  /* testCase */testCase,
  /* environmentVariables */environmentVariables,
  /* testCases */testCases
];

var file = Fs.readFileSync("testfile.yaml", "utf8");

var json = Curry._2(JsYaml.safeLoad, file, /* () */0);

var result = Json_decode.list(testCase, json);

console.log(List.hd(result)[/* description */0]);

exports.UnknownHttpMethod = UnknownHttpMethod;
exports.Decode            = Decode;
exports.file              = file;
exports.result            = result;
/* file Not a pure module */
